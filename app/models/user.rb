class User < ApplicationRecord
  # Signing up for the system is disabled.
  # Only system/institution admins can create new users, BUT
  # :registerable needs to stay here due to the need for edit_registration
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  belongs_to :institution
  belongs_to :i_class
  has_many :subjects, through: :i_class
  has_many :attendances
  has_many :assigned_grades_to_me, class_name: 'Grade', foreign_key: 'assignee'
  has_many :assigned_grades_from_me, class_name: 'Grade', foreign_key: 'assignee'

  enum access_type: {
         admin: 5,
         director: 4,
         teacher: 3,
         student: 2,
         unassigned: 0,
       }

  mount_uploader :image, ImageUploader

  validates :access_type, presence: true #, inclusion: { in: :access_type }
  validates :email, presence: true

  scope :users_visible_to_me, ->(access_types) { where(access_type: access_types)}

  scope :access_visible_to, ->(user) {
    visible = %w[student]
    visible << %w[teacher director] if user.teacher? || user.director? || user.admin?
    visible << 'admin' if user.admin?

    visible.flatten
  }

  def has_elevated_privileges?
    admin? || director?
  end

  def can_grade?
    has_elevated_privileges? || teacher?
  end

  # generated by AA
  def self.ransackable_attributes(auth_object = nil)
    %w[access_type
       created_at
       email
       encrypted_password
       gender
       id
       image
       name
       phone
       remember_created_at
       reset_password_sent_at
       reset_password_token
       updated_at
       institution
     ]
  end

  def self.ransackable_associations(auth_object = nil)
    %w[institution]
  end
end
