require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/attendances", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Attendance. As you add validations to Attendance, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:attendance)
  }

  let(:invalid_attributes) {
    { asd: 'invalid' }
  }

  let(:teacher) { build(:user, access_type: 'teacher') }

  before(:each) do
    sign_in teacher
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_attendance_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Attendance" do
        expect {
          post attendances_url, params: { attendance: valid_attributes }
        }.to_not change(Attendance, :count)
      end

      it "redirects to the created attendance" do
        post attendances_url, params: { attendance: valid_attributes }
        expect(response).to_not be_successful
        # RSpec generated faulty test here, valid attributes contain no ID
      end
    end

    context 'when a similar one exists' do
      let(:teacher) { build(:user, access_type: :teacher) }
      let(:student) { build(:user, access_type: :student) }
      let(:klass) { build(:i_class) }

      before do
        Attendance.create!(teacher: teacher, student: student, i_class: klass, attendance_type: :present)
      end

      it 'is handled correctly' do
        expect(Attendance.count).to eq 1
        # we have an attendance
        # so when we try creating new one force
        # the same student and class we should
        # not be able to do so
        expect {
          post attendances_url, params: {
                 attendance: {
                   teacher: teacher, student: student, i_class: klass, attendance_type: :absent
                 }
               }
        }.not_to change { Attendance.count }.from(1)
      end
    end


    context "with invalid parameters" do
      it "does not create a new Attendance" do
        expect {
          post attendances_url, params: { attendance: invalid_attributes }
        }.to change(Attendance, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post attendances_url, params: { attendance: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
